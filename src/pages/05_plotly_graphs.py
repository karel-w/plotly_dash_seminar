import dash
from dash import html, dcc, callback, Input, Output
import dash_mantine_components as dmc
import dash_bootstrap_components as dbc
from graphs.topenzyme_graph import topenzyme_graph_basic

dash.register_page(
    __name__,
    path='/plotly',
    title='plotly graphs',
    name='plotly graphs',
    icon='fa-solid fa-chart-line'
    )

fig = topenzyme_graph_basic(csv_path='../data/topenzyme_data.csv')

layout = html.Div(children=[
    html.H1(children='Plotly graphs.'),

    dcc.Markdown('''
    We are going to use plotly as our graphing library. Plotly works similarly to matplotlib or seaborn. 
    If you are familiar with any of the libraries getting used to plotly should be relatively simple. 
    Many of the common plot types such as scatter-, line-, bar- and pie charts are available. 
    As well as statistical charts such as box plots, histograms, distplots, etc.
    We can take a look [here](https://plotly.com/python/) to see all the different plot types.

    What i really like about plotly is that you can also use these plots in your jupyter notebooks. 
    Which you can use to combine explainability and interactiveness further. 

    Lets start exploring plotly graphs by remaking a figure from one of my publications.
    We will see how plotly graphs already offer some basic interactability right out of the box.
    '''),

    dbc.Row([
        dbc.Col([
            html.Img(src='assets/topenzyme_comparison_figure.png', alt='topenzyme-figure', style={'display':'flex', 'width':'88%', 'margin':'auto', 'justify-content':'center', 'margin-top':'30px'}),            
        ]),

        dbc.Col([
            dcc.Graph(figure=fig),
        ]),
    ]),

    dbc.Row([
        dbc.Col([
            dcc.Markdown('''
                From [https://doi.org/10.1093/bioinformatics/btad116](https://doi.org/10.1093/bioinformatics/btad116). 
                This figure describes the scoring for enzymes generated by TopModel, developed in our lab, and AlphaFold2.
                This figure was made using the matplotlib libary.
                ''', 
                style={'display':'flex', 'width':'90%', 'margin':'auto', 'justify-content':'center'}
            ),
        ]),

        dbc.Col([
            dcc.Markdown('''
            The same figure constructed in plotly. No special code needed to make the plot interactive.
            Try hovering over points in the scatter plot or clicking on a legend item. 
            You can even zoom to specific areas by dragging in the plot.
            When you hover above the plot a small menu bar will appear on the top right with further options.
            ''')
        ]),
    ]),

    dcc.Markdown('''
    We could even remove the subplots now as they are no longer required for clarity.
    If you want to investigate a specific class in detail we can toggle them on/off from the legend.
    '''),

    dcc.Markdown('''
    Now lets take a look at the code and what is required to create a plot like this.
    '''),

    dmc.Prism(
        language='python',
        withLineNumbers=True,
        highlightLines = {
            11: {'color':'green'},
            12: {'color':'green'},
            13: {'color':'green'},
            14: {'color':'green'},
            15: {'color':'green'},
            16: {'color':'green'},
            22: {'color':'green'},
            32: {'color':'green'},
            33: {'color':'green'},
            34: {'color':'green'},
            35: {'color':'green'},
            36: {'color':'green'},
            37: {'color':'green'},
            38: {'color':'green'},
            39: {'color':'green'},
            71: {'color':'green'},
            128: {'color':'green'},
            129: {'color':'green'},
            157: {'color':'green'},
            167: {'color':'green'},
            200: {'color':'green'},
        },
        children='''
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
import numpy as np

data = pd.read_csv(csv_path)

#create the subplot layout
fig = make_subplots(
    rows=4, cols=4,
    specs = [
        [{'rowspan':3, 'colspan':3}, None, None, {}],
        [None, None, None, {}],
        [None, None, None, {}],
        [{}, {}, {}, {}],
    ],
    print_grid=False,
    vertical_spacing = 0,
    horizontal_spacing = 0,
)

#settings for each enzyme class
enzyme_classes = np.arange(1, 8, 1)
enzyme_names = ['Oxidoreductases', 'Transferases', 'Hydrolases', 'Lyases', 'Isomerases', 'Ligases', 'Translocases']
markers = ['circle', 'cross', 'star', 'triangle-up', 'diamond', 'pentagon', 'square']
colors = ['#800000', '#000075', '#e6194B', '#f58231', '#a9a9a9', '#f032e6', '#3cb44b']
positions = [(4,1), (4, 2), (4,3), (4,4), (1,4), (2,4), (3,4)]

#itterate over each enzyme class settings and a trace for each ec
for ec, en, symbol, color, pos in zip(enzyme_classes, enzyme_names, markers, colors, positions):
    #main plot
    fig.add_trace(
        go.Scatter(
            x = data[data['EC'].str.startswith(f'{ec}')]['score_alpha'], y=data[data['EC'].str.startswith(f'{ec}')]['score_topm'], 
            customdata = data[data['EC'].str.startswith(f'{ec}')]['EC'].tolist(),
            hovertemplate = '<br>'.join([
                'TopScore AF2: %{x}',
                'TopScore TopModel: %{y}',
                'EC: %{customdata}'
            ]),
            mode='markers',
            marker_color = color,
            marker_symbol = symbol,
            marker_size = 8,
            name = en,
            legendrank = ec,
            legendgroup = str(ec),
        ),
        row = 1,
        col = 1
    )
    # side plots
    fig.add_trace(
        go.Scatter(
            x = data[data['EC'].str.startswith(f'{ec}')]['score_alpha'], y=data[data['EC'].str.startswith(f'{ec}')]['score_topm'], 
            customdata = data[data['EC'].str.startswith(f'{ec}')]['EC'],
            mode='markers',
            marker_color = color,
            marker_symbol = symbol,
            marker_size = 6,
            name = en,
            legendrank = ec,
            legendgroup = str(ec),
            showlegend=False,
        ),
        row = pos[0],
        col = pos[1],
    )

#add slope to differentiate between areas
slope_trace = {
    'type':'scatter',
    'x':[0, 1],
    'y':[0, 1],
    'line_shape':'linear',
    'showlegend':False,
    'line' : {'color':'black'},
}

fig.append_trace(slope_trace, 1, 1)
for pos in positions:
    fig.append_trace(slope_trace, pos[0], pos[1])


#add squares for good and ok regime
fig.add_shape(
    type='rect',
    x0=0, y0=0, x1=0.4, y1=0.4,
    fillcolor='#6695be',
    line={
        'color':'#6695be'
    },
    layer='below',
    label = {
        'text':'good quality', 'textposition':'top left',
        'font':{'family':'arial', 'size': 8},
    },
)
fig.add_shape(
    type='rect',
    x0=0, y0=0, x1=0.2, y1=0.2,
    fillcolor='#A3DA8D',
    line={
        'color':'#A3DA8D'
    },
    layer='below',
    label = {
        'text':'high quality', 'textposition':'top left',
        'font':{'family':'arial', 'size': 8},
    },
)

#add lines for good and ok regime to subplots.
for pos in positions:
    for val in [0.2, 0.4]:
        fig.add_shape(
            type='rect',
            x0=0, y0=0, x1=val, y1=val,
            line={
                'color': '#A3DA8D' if val == 0.2 else '#6695be',
                'width': 2,
            },
            layer = 'below',
            row = pos[0],
            col = pos[1],
        )

# update layout
fig.update_layout(
    width=800,
    height=800,
    paper_bgcolor = 'rgba(0,0,0,0)',
    plot_bgcolor = 'rgba(0,0,0,0)',
    font = {
        'family':'Arial',
        'size':20,
        'color':'black',
    },
    legend_tracegroupgap = 3,
    legend = {
        'orientation':'v',
        'yanchor':'bottom',
        'xanchor':'right',
        'y': 0.28,
        'x': 0.7,
        'font' : {
            'size':14,
            'family':'Arial',
        }
    },
    xaxis_title = 'AlphaFold2 (TopScore)',
    yaxis_title = 'TopModel (TopScore)',
)

# we split up the axes updates in the main figure and side plots.
# side plots first then overwrite for main plot
fig.update_xaxes(
    range=[0.1, 0.65],
    showline=True,
    showgrid=False,
    ticks='',
    showticklabels=False,
    mirror=True,
    linecolor='black',
)

fig.update_yaxes(
    range=[0.1, 0.65],
    ticks='',
    showticklabels=False,
    showline=True,
    showgrid=False,
    mirror=True,
    linecolor='black',
)

# update axes main figure
fig.update_xaxes(
    range=[0.1, 0.65],
    showticklabels=True,
    showline=True,
    mirror=True,
    side='top',
    linecolor='black',
    row=1,
    col=1,
)

fig.update_yaxes(
    range=[0.1, 0.65],
    showticklabels=True,
    side='left',
    showline=True,
    mirror=True,
    linecolor='black',
    row=1,
    col=1,
)

fig.write_image('topenzyme_graph_test.png')
        '''
    ),

    dcc.Markdown('''
        In the next page we will add custom callbacks and see how we can further improve the interactability.
        '''),


], style={'margin-left':'10px'})

