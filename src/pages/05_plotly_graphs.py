import dash
from dash import html, dcc, callback, Input, Output
import dash_mantine_components as dmc
import dash_bootstrap_components as dbc

dash.register_page(
    __name__,
    path='/plotly',
    title='plotly graphs',
    name='plotly graphs',
    icon='fa-solid fa-chart-line'
    )

layout = html.Div(children=[
    html.H1(children='Plotly graphs.'),

    dcc.Markdown('''
    We are going to use plotly as our graphing library. Plotly works similarly to matplotlib or seaborn. 
    If you are familiar with any of the libraries getting used to plotly should be relatively simple. 
    Many of the common plot types such as scatter-, line-, bar- and pie charts are available. 
    As well as statistical charts such as box plots, histograms, distplots, etc.
    We can take a look [here](https://plotly.com/python/) to see all the different plot types.

    What i really like about plotly is that you can also use these plots in your jupyter notebooks. 
    Which you can use to combine explainability and interactiveness further. 

    Lets start exploring plotly graphs by remaking a figure from one of my publications.
    We will see how plotly graphs already offer some basic interactability right out of the box.
    '''),


    dbc.Col([
    html.Img(src='assets/topenzyme_comparison_figure.png', alt='topenzyme-figure', style={'display':'flex', 'width':'30%', 'margin':'auto', 'justify-content':'center'}),
    dcc.Markdown('''
    From [https://doi.org/10.1093/bioinformatics/btad116](https://doi.org/10.1093/bioinformatics/btad116). 
    This figure describes the scoring for enzymes generated by TopModel, developed in our lab, and AlphaFold2.
    ''', style={'display':'flex', 'width':'30%', 'margin':'auto', 'justify-content':'center'}),
    ]),

    dcc.Markdown('''
        In the next page we will add custom callbacks and see how we can further improve the interactability.
        '''),

], style={'margin-left':'10px'})

